<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI on Arno's Blog</title><link>https://umpire2018.github.io/categories/ai/</link><description>Recent content in AI on Arno's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Tue, 24 Oct 2023 12:02:30 +0800</lastBuildDate><atom:link href="https://umpire2018.github.io/categories/ai/index.xml" rel="self" type="application/rss+xml"/><item><title>Xagent Video 大纲</title><link>https://umpire2018.github.io/p/xagent-video-%E5%A4%A7%E7%BA%B2/</link><pubDate>Tue, 24 Oct 2023 12:02:30 +0800</pubDate><guid>https://umpire2018.github.io/p/xagent-video-%E5%A4%A7%E7%BA%B2/</guid><description>&lt;h2 id="参考视频">参考视频&lt;/h2>
&lt;div class="video-wrapper">
&lt;video
controls
src="https://www.youtube.com/watch?v=X6dna0O6pCw"
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="https://www.youtube.com/watch?v=X6dna0O6pCw">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;p>XAgent: AutoGen 2.0? An Autonomous Agent for Complex Task Solving (Installation Tutorial)&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>XAgent是一个名为&amp;quot;AutoGen 2.0&amp;quot;的自主代理，目的在于解决复杂任务。本视频介绍了XAgent的能力和如何安装它。&lt;/p>
&lt;h3 id="highlights">Highlights&lt;/h3>
&lt;p>2023年，自主代理技术逐渐兴起。目前的AI代理受到人为规则、知识和偏见的限制，通信不一致，任务管理不灵活。XAgent旨在解决这些问题，实现复杂任务的自主解决。&lt;/p>
&lt;p>[🔧] XAgent是一个开源项目，利用大型语言模型驱动自主代理，可以自动解决各种任务。&lt;/p>
&lt;p>[📢] 除了基本功能，XAgent还提供了工具服务器，配备了多种工具来帮助执行各种任务。&lt;/p>
&lt;p>[🖥️] 本教程详细介绍了如何安装和运行XAgent，包括所需的系统要求和步骤。&lt;/p>
&lt;p>[📈] XAgent在多个测试领域中都超越了基本的GPT模型和其他AI代理。&lt;/p>
&lt;p>[🧠] XAgent的目标是创建一个超级智能代理，可以解决各种任务，尽管它仍处于早期阶段。&lt;/p>
&lt;p>[🔒] XAgent运行在Docker容器内，确保安全性。&lt;/p>
&lt;p>[📦] XAgent可扩展性强，允许添加新插件、模型和工具来增强代理的能力。&lt;/p>
&lt;p>[🖼️] XAgent提供友好的GUI，方便用户与代理进行交互。&lt;/p>
&lt;p>[🤝] XAgent支持与人类的合作，用户可以与代理一起解决任务。&lt;/p>
&lt;p>注意XAgent需要至少8GB RAM才能运行。安装需要Git、Python和Docker支持。可通过命令行或GUI运行XAgent，配置API密钥后即可运行任务。
XAgent是一个旨在解决复杂任务的自主代理项目，使用大型语言模型来自动执行各种任务。尽管项目仍处于早期阶段，但它有潜力成为一个全能的自主代理，具有强大的扩展性和安全性。用户可以通过命令行或GUI与XAgent交互，并配置API密钥以运行任务。项目还提供了一系列工具，如文件编辑器、Python笔记本、Web浏览等，以支持任务的执行。最重要的是，XAgent的目标是不断改进，以成为一个可以解决各种任务的超级智能代理。&lt;/p>
&lt;h3 id="大纲">大纲&lt;/h3>
&lt;h3 id="1-背景介绍与xagent概览-2分钟">1. 背景介绍与XAgent概览 (2分钟)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>视频视觉：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>利用缓慢的平移镜头展示相关行业背景图片。&lt;/li>
&lt;li>使用动态图表展示技术进展。&lt;/li>
&lt;li>XAgent的标志短暂放大或3D旋转进入镜头。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>音频：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>背景音乐：轻快、科技感的音乐。&lt;/li>
&lt;li>配音：专业的旁白，用平和的语气进行介绍。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-xagent项目demo与实际应用-65分钟">2. XAgent项目DEMO与实际应用 (6.5分钟)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>视频视觉：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>使用屏幕录制工具捕捉实际的界面操作、任务处理过程。&lt;/li>
&lt;li>当解释双循环机制时，使用动态或3D动画来展示双循环的工作流程。&lt;/li>
&lt;li>插入实际应用案例的短片或客户反馈。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>音频：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>背景音乐：中速、有节奏的音乐，突出操作的流畅性。&lt;/li>
&lt;li>配音：解说DEMO的每一步，并强调其实际应用价值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-人机交互与新智能-5分钟">3. 人机交互与新智能 (5分钟)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>视频视觉：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>展示AI与用户的交互情景，可以使用角色扮演或动画。&lt;/li>
&lt;li>展示XAgent的界面、特色功能、交互过程，辅以箭头、高亮等效果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>音频：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>背景音乐：平稳、和谐。&lt;/li>
&lt;li>配音：解释每一个交互步骤和其背后的逻辑。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="4-整合大模型与协同工作-3分钟">4. 整合大模型与协同工作 (3分钟)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>视频视觉：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>各种大模型和工具的图标快速组合或3D旋转效果。&lt;/li>
&lt;li>展示实际的操作界面，特别是模型间的互动部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>音频：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>背景音乐：低调、深沉。&lt;/li>
&lt;li>配音：解释模型的整合方式和协同的优势。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="5-结束与展望-25分钟">5. 结束与展望 (2.5分钟)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>视频视觉：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>回顾XAgent的主要特点，可以使用快速回放或白板动画。&lt;/li>
&lt;li>展望未来，使用渐变、飞入效果展示潜在的应用场景或新特性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>音频：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>背景音乐：充满希望和展望的旋律。&lt;/li>
&lt;li>配音：总结XAgent的贡献，表达对未来的期待。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="相关链接">相关链接&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://medium.com/future-organization-lab-%E6%9C%AA%E4%BE%86%E7%B5%84%E7%B9%94%E5%AF%A6%E9%A9%97%E5%AE%A4/%E8%A1%8C%E5%8B%95%E7%A7%91%E5%AD%B8%E4%B8%AD%E7%9A%84%E9%9B%99%E7%92%B0%E5%AD%B8%E7%BF%92-double-loop-learning-%E5%9C%98%E9%9A%8A%E5%9C%A8%E8%A7%A3%E6%B1%BA%E8%A1%A8%E9%9D%A2%E5%95%8F%E9%A1%8C-%E9%82%84%E6%98%AF%E6%94%B9%E5%96%84%E9%80%A0%E6%88%90%E5%95%8F%E9%A1%8C%E7%9A%84%E5%BF%83%E6%99%BA%E6%A8%A1%E5%9E%8B-1fbdcd475201" target="_blank" rel="noopener"
>團隊在解決表面問題，還是改善造成問題的心智模型？&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/77165674" target="_blank" rel="noopener"
>思维模型No.54|双环学习，让你的经验变成智慧&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://x-agent.net/share" target="_blank" rel="noopener"
>demo 地址&lt;/a> 建议：1. 取消密码 2. 增加暗黑模式 3. 点击即运行&lt;/li>
&lt;/ul>
&lt;h2 id="ryan对项目的理解">Ryan对项目的理解&lt;/h2>
&lt;h3 id="整体理解">整体理解：&lt;/h3>
&lt;p>这是一个致力于能使用的多个ai共同协作解决任何问题的系统。以下是本人总结该系统的各个特性和优势。&lt;/p>
&lt;ol>
&lt;li>自主性：能在接受问题时将任务分解以提高效率。这个系统不依赖人的调试或者干预，具有自主性，甚至能为自己的工作部署各种工具。&lt;/li>
&lt;li>安全性：可以安全运行，由于其在一个docker中运行，所以不会影响主要环境，同时意味着其能够更广泛的运用在生活工作之中。&lt;/li>
&lt;li>GUI：对XAgent的操作对用户友好，使用合理的图形化界面和命令行结合，可以满足各种用户的需求。&lt;/li>
&lt;li>可拓展性能：项目本身开源，意味着可以增加新的设计功能，或者利用它进行新的系统实现。&lt;/li>
&lt;li>创造性（智能性）：在传统ai系统的基础上，结合热门的chatGPT系统。不仅有能力在行进中遵循人类指导来解决复杂的任务，而且在遇到挑战，条件模糊时能主动向人类寻求细节指令，之后提出创造性决策。&lt;/li>
&lt;/ol>
&lt;h2 id="原文细节">原文细节：&lt;/h2>
&lt;p>&lt;strong>内外双循环&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>外循环：负责全局任务规划，将复杂任务分解为可操作的简单任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内循环：负责局部任务执行，专注于细节。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>外循环会将给定的复杂任务分解成更小、更易管理的“子任务”，生成 “初始规划”，形成任务序列。
随后，它将逐次把每个子任务传递给内循环解决。在这个过程中，外循环会不断监督任务的进度和状态，并根据反馈对后续规划进行 “迭代优化”。&lt;/p>
&lt;p>内循环中有特定的根据子任务性质的不同，它可以从外部系统中检索工具，并针对子任务进行一步步求解。
在子任务完成后，它将生成当前子任务执行过程的反思，反馈给外循环，指示当前任务是否完成，以及任务执行中的潜在优化点。&lt;/p>
&lt;p>内外双循环有利于多个ai共同促进，能对工作进行完善。由于外循环任务的分解，能让效率提高，内循环对子任务专事专干，能解决更多问题，使得系统的稳定性提高。重要的是，任务的明确分解使得人在指导系统工作时候能够对各个部分对症下药。&lt;/p>
&lt;p>&lt;strong>人机交互新智能&lt;/strong>&lt;/p>
&lt;p>主动向人类询问更加具提条件，在真正执行之前解决必须解决的问题，而不是出错后再改正，能够使工作更加节省资源。&lt;/p>
&lt;p>这是一个突破性进展，继让ai生成文字，图片，视频，程序等等后出现了让ai生成相关的问题角度，由一个主要题目生成了细节问题。&lt;/p>
&lt;p>&lt;em>想法：问题可以是除了关键字还主动给出人类倾向的解决方案，让用户选择现成的。也能给出那么人类在回答问题时候也不必拘泥于文字形式，可以是各种文件类型。&lt;/em>&lt;/p>
&lt;p>&lt;strong>整合大模型&lt;/strong>&lt;/p>
&lt;p>该系统整合了各种先进的大模型，ToolServer 的关键组件包括：ToolServerNode、ToolServerMonitor、ToolServerManager，在执行操作、节点检查、周期管理等方面提供强大的能力。
目前，XAgent 的 ToolSever 支持 FileSystemEnv、PythonNotoBook、WebEnv、ExecuteShell、RapidAPIEnv、AskHumanforHelp 等多种工具。使各模型的优缺点互补，从而解放模型性能。&lt;/p>
&lt;p>&lt;em>想法：如果能增加更多的模型，如画图ai或者其他生成型ai，就能扩展系统的功能，增强力量。而且在调用工具的时候能考虑添加监视，防止导致崩溃。&lt;/em>&lt;/p>
&lt;p>&lt;strong>用户界面（GUI）&lt;/strong>&lt;/p>
&lt;p>XAgent的界面直观和清晰，对比很多系统都是大优势。&lt;/p>
&lt;p>&lt;em>想法：是否也能考虑新增个性化主题设置，和环境联动，满足各种人群的需求&lt;/em>&lt;/p>
&lt;h2 id="原视频文稿">原视频文稿&lt;/h2>
&lt;p>00:00 autonomous agents have been popping around in the year of 2023 with the hopes of achieving a step closer to AI we&amp;rsquo;ve seen this many times with different types of AI agents we covered on this channel with super AGI Auto gbt as well as with baby AGI now while these pioneering projects have demonstrated potential in this direction the journey to fully automate AI agents still presents quite a formidable challenge now this is specifically with autonomy where existing agents are bounded to human imposed rules knowledges as well&lt;/p>
&lt;p>00:37 as by biases then you have the inconsistent communication framework and this is where there is a lack of mode of communication that leads to a potential misunderstanding lastly you have rigged task management this is where existing agents lack the flexibility in having highlevel task management these are these are just basically handful of scenarios in which AI agents have this challenge however let me introduce you a new project called X agent a solution to these challenges an autonomous agent that is targeting the realization of&lt;/p>
&lt;p>01:14 complex task solving task in an autonomous manner this is a project that is working to develop intelligent agents that are capable of mimicking human cognition as well as executing intricate tasks autonomously throughout today&amp;rsquo;s video I&amp;rsquo;m going to be showcasing what you can actually do with X agent talk a little bit more about the capabilities showcase how you can actually install it and going over basically in general what you can do with it so with that thought guys make sure you stay tuned throughout&lt;/p>
&lt;p>01:44 the end of this video and let&amp;rsquo;s get straight to it hey what is up guys welcome back to another YouTube video at the world of AI as you mentioned at the start we&amp;rsquo;re going to take a look at X agent which is an autonomous agent for complex task solving X agent is an open-source project that utilizes large language models to drive autonomous agents so that it can automatically solve various tasks now just note that even though it is designed for solving complex task that doesn&amp;rsquo;t basically mean that it&amp;rsquo;s&lt;/p>
&lt;p>02:17 constrained to only solving complex tasks it&amp;rsquo;s designed to be a general purpose agent so that it could be applied to wide ranges of tasks whether it is a complex task or just a regular task something to note is is that this project is fairly new in its early stages so keep that in mind as it was just recently released about yesterday the goal of this project as stated at the start is that they want to create a super intelligent agent that can basically solve any sort of task that it&amp;rsquo;s been basically given it&amp;rsquo;s in its&lt;/p>
&lt;p>02:49 early stages so they&amp;rsquo;re continuous to working on this but it&amp;rsquo;s something that they&amp;rsquo;re going to keep on improving over the months so with that thought let&amp;rsquo;s now explore some cool features that are associated with X agent so you can get some more like idea as to what you can actually do with it and understand some of the capabilities about ex agent if you guys would like to access our private Discord in which you can get exclusive features such as our AI subscriptions to different types of tools for free you have giveaways you&lt;/p>
&lt;p>03:19 have different types of consultation for free you have different methods of just interacting with the community which can get you networking opportunities Daily News and so much more if you&amp;rsquo;re interested in all that I highly recommend that you check out the patreon link in the description below if you guys haven&amp;rsquo;t followed world of AI on Twitter I highly recommend that you do so so you can stay up to date with the latest AI news lastly make sure you guys subscribe turn notification Bell like this video and check out our previous&lt;/p>
&lt;p>03:45 videos because there&amp;rsquo;s a lot of content that I highly recommend would benefit you so with that thought guys thank you guys so much for watching and let&amp;rsquo;s get right back into the video now guys as you mentioned it&amp;rsquo;s something that can help solve complex task in which they have have worked upon in different categories you have the autonomy in which it is a feature that X agent can automatically solve various task without human participation now this is something that we&amp;rsquo;ve seen with many different autonomous agents on my&lt;/p>
&lt;p>04:15 channel where we&amp;rsquo;ve seen autonomous AI agents like super agent as well as autogen as well as other ones that we mentioned such as the mgpt where you have multiple AI agents working together alongside with other agents to collaborativ solve a project this is the same sort of idea that X agent is trying to accomplish but the thing is you have one agent that does this and it does it on its own without any sort of human participation in terms of safety we have X agent in which it is designed to run safely all actions are constrained&lt;/p>
&lt;p>04:51 inside a Docker container so run it anyways another feature is its extendability X agent is basically designed to be extendable and and this basically means that you&amp;rsquo;re able to build upon this add new plugins add new models add new tools so that it enhances the agent&amp;rsquo;s abilities it makes new agents it grows the agent and it makes basically X agent so much more like better in a way cuz you&amp;rsquo;re able to customize it you have a GUI and it provides this friendly GUI for users to interact with their agents you have&lt;/p>
&lt;p>05:24 another feature in which you have cooperation with human as you&amp;rsquo;re basically able to inut your participation with ex agent so that you can collaborate to tackle certain tasks and this these are just some of the cool features now they have stated some couple things but we will cover in the next segment to speak further on some of the capabilities of X agent we have the tool server which is a server that equips X agent with a set of different types of robust and secure tools to tackle a range of different types of tasks it operates as a Docker&lt;/p>
&lt;p>05:58 container and what this basically means is that it offers this protective environment in which X agent can execute its operations we can see that it offers some of these tools such as a file editor which provides the text editing tool that can write read and modify files you have the python notebook which provides an interactive python notebook that can run python code to validate ideas as well as drawing figures you have the web browsing feature which provides you access to the web browser so you can search and visit different&lt;/p>
&lt;p>06:26 types of web pages you have the shell which provides a Bash shell tool that can execute any bat commands or shell commands sorry and even install programs and host Services you have the rapid API which provides a tool to retrieve apis from Rapid API and you&amp;rsquo;re able to call them which provides a wide range of apis that X agent can use you can see tool bench to provide like this is another application that provides the list of different apis and it&amp;rsquo;s a platform for providing you different ranges of API&lt;/p>
&lt;p>06:57 callings so that you can utilize it with within this collection now it also says that you can also easily add new tools to the tool server to enhance the capabilities you can see over here you&amp;rsquo;re able to have and build upon this and you can see there&amp;rsquo;s a build and setup tool server which is one of the action pieces to help improve the capabilities now we&amp;rsquo;ll get to the next step of the video and showcase how you can install X agent now guys I highly recommend that you have at least 8 gabt of ram to actually run this otherwise&lt;/p>
&lt;p>07:29 it&amp;rsquo;s not even feasible to run on your local desktop if you do not have that requirement if you do fulfill that we can move forward in the installation process you need to make sure that you have git installed which is an application that will help you clone this repository onto your desktop you&amp;rsquo;ll need python as your code editor and you&amp;rsquo;ll need Docker so once you have these three things fulfilled we can move forward with installation so what we&amp;rsquo;ll need to do is first go on to the GitHub repository I&amp;rsquo;ll leave all these links in&lt;/p>
&lt;p>07:56 the description below so that you can access it fairly easily now what you want to do is click on this green button once you&amp;rsquo;re on the repository copy the link scroll down go onto the actual quick start command area open up your command prompt type in get clone paste the link and click enter I always mess this up in every video but once you have cloned the repository what you will need to do is copy this command CD tool server and this is where you&amp;rsquo;re going to be going into the tool server and building the actual docker post for&lt;/p>
&lt;p>08:30 it now guys act after you install tool server and clone this repository you need to go into the folder and type in the command Docker compose up once this is done you&amp;rsquo;re going to create the docker compose and once this is done you just need to build the docker image for Tool server and you&amp;rsquo;re able to start this container once you have started up you can start running and setting up X agent this is by typing in PIP install our requirements now this is fairly easy you just go into the X agent file once&lt;/p>
&lt;p>09:01 you&amp;rsquo;re inside paste this command pip install our requirements you&amp;rsquo;re going to be able to start installing these requirements this might take a couple minutes to a couple seconds depending on your computer so once it has finished installing all the requirements you&amp;rsquo;re able to start running it fairly easily now I&amp;rsquo;m going to be using visual studio code to show and execute how you can run different types of tasks so I&amp;rsquo;m going to load this up on Visual Studio code and I&amp;rsquo;ll be right back now to start&lt;/p>
&lt;p>09:29 executing task you will need to open up your code editor or your ID that you can use in this case I&amp;rsquo;m going to use Visual Studio code so I&amp;rsquo;m going to open the folder up find where I basically cloned it open up X agent once you have done that you trust the authors you need to go on the configuration this is where you input your API keys for whatever model that you want to use in this case I&amp;rsquo;m going to be using GPT 3.&lt;/p>
&lt;p>09:55 5 so I&amp;rsquo;ll put my key over here once I have used that or saved it I basically go and click save and you&amp;rsquo;ll be able to start running it now once I have done that you need to go into the actual uh terminal and you need to copy this code over here in this case you have the run.py you can easily just run it off of here it&amp;rsquo;s fairly easy but in this case if you want to give it a command as well as run the model that you want you will need to copy this code and select whatever model that you want to play with so what you can do is just&lt;/p>
&lt;p>10:27 uh create a new terminal I&amp;rsquo;m just gonna open this up a little bit so it&amp;rsquo;s easily accessible so once I have created a new terminal you can easily just write paste this command in Python run.py you give it a task you put your model so in this case you can say uh create me a snake game and the model is right over here I&amp;rsquo;m going to use gp3 3.&lt;/p>
&lt;p>10:55 5 so I can put GPT 3.5 and click enter now I don&amp;rsquo;t have my API key connected so it won&amp;rsquo;t work but once I have inputed this it will start executing the task now in this case you can see that it&amp;rsquo;s not going to be able to do this cuz I don&amp;rsquo;t have my API key connected but it&amp;rsquo;s easy as that guys once you have inputed your keys you&amp;rsquo;re able to execute this task now another thing is is that you&amp;rsquo;re able to run this agent with the GUI it&amp;rsquo;s fairly easy and what you can do is go onto your command prompt go back into&lt;/p>
&lt;p>11:28 the actual X agent server once you&amp;rsquo;re in that you basically just compose the docker up again once you have done that you just need to install the requirements that are needed install the python start server this is by basically starting the server up and you&amp;rsquo;ll be able to access it on your local host and now guys it will look like this basically it&amp;rsquo;s going to look like exactly like this you&amp;rsquo;re going to you can see that you can input certain types of configurations you can give your input which is can you help me use&lt;/p>
&lt;p>11:59 python to analyze the given data you are able to upload this data and it will then give you a step-by-step analysis as to how it can graph it so in this case it gives you a good demonstration as to how it explains the data and it gives you a good use with python and that&amp;rsquo;s basically a good example now let&amp;rsquo;s actually take a look at a cool demo so we can get a better idea as to what you can actually do with xation in this case we have a demo relating to python on code in this case the input is I want to&lt;/p>
&lt;p>12:32 play a game of 24 and it basically then uses uh the plus sign minus sign multiplication division to get 24 using four numbers each number can be used only once please give me 10 examples of combinations of numbers that can get to 24 write the code and show me in this case it executes it it focuses on thoughts reasoning it gives it a plan and it also gives you criticism on what should be associated with the code generation and then uses the different tools and explains to you which tools that they actually use now I don&amp;rsquo;t know&lt;/p>
&lt;p>13:07 about you guys but this is something that I&amp;rsquo;ve never seen with any other autonomous agent as it gives you a good breakdown as to how it&amp;rsquo;s going to solve your answer or your input if you go down a little bit more it works forward into doing this 10 more times it has a task refinement which works on improving the task and it shows the Milestones that it took to basically achieve the input that was actually given now guys I want to end off on this last note where this diagram above is basically showcasing how X Agent X agent&lt;/p>
&lt;p>13:43 sorry outperforms the basic GPT models in different tested areas we can see that it has been able to outperform autog gbt as well in different like areas it fully beats uh autog gbt in data analysis it beats it in math you have search and Reporting life assistant as well as in coding and developing which is really really impressive now it not only beats it with auto gbt but it&amp;rsquo;s able to beat it with gbts for on EX existing AI benchmarks it&amp;rsquo;s able to do this in many different areas with fresh QA which are fresh question answers you&lt;/p>
&lt;p>14:23 have different metrics as to how it&amp;rsquo;s able to Benchmark autonomous AI agents now this is really impressive as to how it&amp;rsquo;s able to comp like basically compare with these different models as well as different AI agents now I highly recommend that you check this blog post out as it gives you more details as to how they&amp;rsquo;re basically able to achieve this gives you a good understanding as to its framework and goes further more in detail about X agent now if you&amp;rsquo;re interested I&amp;rsquo;ll leave all these links in&lt;/p>
&lt;p>14:52 the description below but guys in conclusion this is quite an intricate application and as it&amp;rsquo;s an autonomous agent for complex task solving so if you&amp;rsquo;re interested in this I&amp;rsquo;ll leave all these links in the description below so that you can access it fairly easily but thank you guys so much for watching I really really appreciate it guys all the support that you guys have been giving me make sure you check out the patreon page you want to access our private Discord definitely give world of AI a follow if you guys haven&amp;rsquo;t on Twitter&lt;/p>
&lt;p>15:20 and lastly make sure you guys subscribe turn notification Bell like this video and check out our previous videos so you can stay up to date with the latest AI news with that thought let&amp;rsquo;s get all let&amp;rsquo;s get to the next step of the video but thank you guys so much for watching if you are interested definitely subscribe I&amp;rsquo;ll see you guys next time have an amazing day stay positive and see you soon guys by&lt;/p></description></item><item><title>洞悉 Agent-GPT</title><link>https://umpire2018.github.io/p/%E6%B4%9E%E6%82%89-agent-gpt/</link><pubDate>Thu, 21 Sep 2023 20:07:13 +0800</pubDate><guid>https://umpire2018.github.io/p/%E6%B4%9E%E6%82%89-agent-gpt/</guid><description>&lt;blockquote>
&lt;p>版本所有：© 2023 Reworkd AI, Inc.&lt;/p>
&lt;p>原文链接：&lt;a class="link" href="https://reworkd.ai/blog/Understanding-AgentGPT" target="_blank" rel="noopener"
>Reworkd Blog&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>生成式预训练变换器（GPT）的发明是近十年来人工智能技术最重要的进步之一。为当今的大型语言模型 (LLM) 提供支持的 GPT 展示了卓越的推理、理解和规划能力。然而，它们的真正潜力尚未完全发挥。&lt;/p>
&lt;p>在 Reworkd，我们相信 LLMs 的真正力量在于代理行为。通过设计一个利用 LLM 的新兴能力的系统并提供支持环境相互作用的生态系统，我们可以充分发挥 GPT-4 等模型的潜力。以下是 AgentGPT 的工作原理。&lt;/p>
&lt;h2 id="llm-有很多限制">LLM 有很多限制&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.techopedia.com/definition/34826/foundation-model" target="_blank" rel="noopener"
>Foundation Model - Techopedia&lt;/a>. 基础模型 - 技术百科。&lt;/p>
&lt;p>如果您熟悉 OpenAI 的 API，则与模型聊天时可能使用的常用公式可能包括：&lt;/p>
&lt;ul>
&lt;li>获取用户指令。&lt;/li>
&lt;li>添加聊天历史。&lt;/li>
&lt;li>通过 API 发送聊天历史记录以获取回答。&lt;/li>
&lt;/ul>
&lt;p>当对话范围较小时，此方法效果很好；然而，当您继续向聊天历史记录中添加新消息时，完成的大小和复杂性会不断增加，您很快就会碰壁：可怕的上下文限制。&lt;/p>
&lt;p>首先引入 &lt;strong>tokens&lt;/strong> 这个概念，形如 字 word 是人类来计算文本长度的最小单位（比如一句话有十个字），而 tokens 则是自然语言处理文本长度的最小单位。数据表明，一个汉字平均在 ChatGPT(GPT3.5和GPT4) 下大概消耗1.12个token。而在一次与 Model 进行交互的过程中，上下文限制则是在一次交互过程中可以输入到模型中的最大标记数。随着我们添加更多的 tokens ，Model 用于计算的成本往往呈指数增长，所以这往往是提示工程师的孽缘。&lt;/p>
&lt;p>一种解决方案是统计聊天历史记录中的 token 数量，将旧消息删除再将其发送到 Model 中以确保其符合 token 限制。虽然这种方法有效，但它最终会减少可用于求知的知识量。&lt;/p>
&lt;p>LLM 们面临的另一个问题是需要人工指导。从根本上说，LLM 们用来预测下一个词的，通常，它们的内部结构本质上并不适合高阶思维过程，例如通过复杂任务进行推理。但这种不足并不意味着它们不能或不会&lt;strong>推理&lt;/strong>。事实上，有几项 &lt;a class="link" href="https://arxiv.org/abs/2205.11916" target="_blank" rel="noopener"
>研究&lt;/a> 表明它们可以。然而，这确实意味着它们面临某些障碍。例如，LLM 自身可以创建一个逻辑步骤列表；然而，它没有观察和反思该清单的内置机制。&lt;/p>
&lt;p>A pre-trained model is essentially a &amp;ldquo;black box&amp;rdquo; for the end user in which the final product that is shipped has &lt;em>limited to no capability of actively updating its knowledge base and tends to act in unpredictable ways&lt;/em>. As a result, it&amp;rsquo;s &lt;a class="link" href="https://arxiv.org/abs/2202.03629" target="_blank" rel="noopener"
>hallucination&lt;/a>-prone.对于最终用户来说，预训练模型本质上是一个“黑匣子”，其最终交付的产品几乎没有主动更新其知识库的能力，并且往往以不可预测的方式运行，所以很容易产生&lt;a class="link" href="https://arxiv.org/abs/2202.03629" target="_blank" rel="noopener"
>幻觉&lt;/a>。&lt;/p>
&lt;p>Thus, it requires a lot of effort on the user&amp;rsquo;s part to guide the model&amp;rsquo;s output, and prompting the LLM itself becomes a job on its own. This extra work is a far cry from our vision of an AI-powered future.因此，需要用户付出很大的努力来指导模型的输出，而促使LLM本身就成为了一项工作。这项额外的工作与我们对人工智能驱动的未来的愿景相去甚远。&lt;/p>
&lt;p>By providing a platform to give LLMs agentic abilities, &lt;em>AgentGPT aims to overcome the limitations of standalone LLMs by leveraging prompt engineering techniques, vector databases, and API tooling.&lt;/em> Here’s some interesting work that is being done with the agent concept:通过提供一个平台来赋予法学硕士代理能力，AgentGPT 旨在利用即时工程技术、矢量数据库和 API 工具来克服独立法学硕士的局限性。以下是利用代理概念所做的一些有趣的工作：&lt;/p>
&lt;p>&lt;a class="link" href="https://twitter.com/DrJimFan/status/1673006745067847683" target="_blank" rel="noopener"
>&lt;img src="https://platform.twitter.com/embed/Tweet.html?dnt=false&amp;amp;embedId=twitter-widget-0&amp;amp;frame=false&amp;amp;hideCard=false&amp;amp;hideThread=false&amp;amp;id=1673006745067847683&amp;amp;lang=en&amp;amp;origin=https%3A%2F%2Fpublish.twitter.com%2F%3Fquery%3Dhttps3A2F2Ftwitter.com2FDrJimFan2Fstatus2F1673006745067847683%26widget%3DTweet&amp;amp;theme=light&amp;amp;widgetsVersion=82e1070%3A1619632193066&amp;amp;width=550px"
loading="lazy"
alt="Tweet by Dr. Jim Fan"
>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Alt: A Twitter post by Dr. Jim FanAlt：Jim Fan 博士的 Twitter 帖子&lt;/p>
&lt;/blockquote>
&lt;h2 id="what-are-agents什么是代理">What are agents? 什么是代理？&lt;/h2>
&lt;p>In a general sense, &lt;a class="link" href="https://zapier.com/blog/ai-agent/" target="_blank" rel="noopener"
>agents&lt;/a> are rational actors. They use thinking and reasoning to influence their environment. &lt;em>This could be in the form of solving problems or pursuing specific goals. They might interact with humans or utilize tools.&lt;/em> Ultimately, we can apply this concept to LLMs to instill more intelligent and logical behavior.
一般意义上，代理人是理性的行为者。他们利用思考和推理来影响他们的环境。这可以是解决问题或追求特定目标的形式。他们可能与人类互动或使用工具。最终，我们可以将这一概念应用于法学硕士，以灌输更多智能和逻辑行为。&lt;/p>
&lt;p>In AgentGPT, large language models essentially function as the &lt;strong>brain&lt;/strong> of each agent. As a result, we can produce powerful agents by cleverly &lt;em>manipulating the English language&lt;/em> and engineering a &lt;em>framework that supports interoperability between LLM completions and a diverse set of APIs&lt;/em>.
在 AgentGPT 中，大型语言模型本质上充当每个代理的大脑。因此，我们可以通过巧妙地操作英语并设计一个支持 LLM 完成和各种 API 之间互操作性的框架来生产强大的代理。&lt;/p>
&lt;h3 id="engineering-this-system-consists-of-3-parts该系统的工程由-3-部分组成">Engineering this system consists of 3 parts.该系统的工程由 3 部分组成。&lt;/h3>
&lt;p>&lt;strong>Reasoning and Planning.&lt;/strong> If you were to simply take a general goal, such as &amp;ldquo;build a scaling e-commerce platform,&amp;rdquo; and give it to ChatGPT, you would likely get a response along the lines of &amp;ldquo;As an AI language model….&amp;rdquo; However, through &lt;strong>prompt engineering&lt;/strong>, we can get a model to &lt;em>break down goals into digestible steps and reflect on them&lt;/em> with a method called chain of thought prompting.
推理和计划。如果您只是简单地提出一个总体目标，例如“构建一个可扩展的电子商务平台”，并将其交给 ChatGPT，您可能会得到类似“作为人工智能语言模型&amp;hellip;&amp;hellip;”的响应。然而，通过提示工程，我们可以得到一个模型，将目标分解为可消化的步骤，并用一种称为思维链提示的方法对其进行反思。&lt;/p>
&lt;p>&lt;strong>Memory.&lt;/strong> When dealing with memory, we divide the problem into &lt;strong>short-term&lt;/strong> and &lt;strong>long-term&lt;/strong>. In managing short-term memory, we can use prompting techniques such as &lt;em>few-shot prompting to steer LLM responses&lt;/em>. However, &lt;em>cost and context limits make it tricky to generate completions without limiting the breadth of information&lt;/em> a model can use to make decisions.
记忆。在处理记忆时，我们将问题分为短期和长期。在管理短期记忆时，我们可以使用提示技术（例如几次提示）来引导法学硕士的反应。然而，成本和上下文限制使得在不限制模型可用于做出决策的信息广度的情况下生成完成结果变得很棘手。&lt;/p>
&lt;p>Similarly, this issue also arises in &lt;strong>long-term memory&lt;/strong> because it would be impossible to provide an appropriate corpus of writing to bridge the gap between GPT -4&amp;rsquo;s cutoff date, 2021, till today. By using vector databases, we attempt to overcome this using specialized models for &lt;em>information retrieval in high-dimensional vector spaces&lt;/em>.
同样，这个问题也出现在长期记忆中，因为不可能提供适当的写作语料库来弥合 GPT -4 的截止日期 2021 年与今天之间的差距。通过使用向量数据库，我们尝试使用高维向量空间中的信息检索专用模型来克服这个问题。&lt;/p>
&lt;p>&lt;strong>Tools&lt;/strong>. Another challenge in using LLMs as general actors is their confinement to text outputs. Again, we can use prompt engineering techniques to solve this issue. We can generate predictable function calls from the LLM through few-shot and chain-of-thought methods, utilizing API tools like &lt;strong>Google Search&lt;/strong>, &lt;strong>Hugging Face&lt;/strong>, &lt;strong>Dall-E&lt;/strong>, etc. In addition, we can use fine-tuned LLMs that only return responses in specialized formatting, like JSON. This is the approach OpenAI took when they recently released the function calling feature for their API.
工具。使用法学硕士作为一般参与者的另一个挑战是它们仅限于文本输出。同样，我们可以使用及时的工程技术来解决这个问题。我们可以利用 Google Search、Hugging Face、Dall-E 等 API 工具，通过少样本和思维链方法从 LLM 生成可预测的函数调用。此外，我们可以使用仅返回的微调 LLM采用特殊格式的响应，例如 JSON。这是 OpenAI 最近发布其 API 的函数调用功能时所采用的方法。&lt;/p>
&lt;p>These three concepts have formed the backbone of multiple successful agent-based LLM platforms such as &lt;a class="link" href="https://github.com/microsoft/JARVIS" target="_blank" rel="noopener"
>Microsoft Jarvis&lt;/a>, &lt;a class="link" href="https://github.com/Significant-Gravitas/Auto-GPT" target="_blank" rel="noopener"
>AutoGPT&lt;/a>, &lt;a class="link" href="https://github.com/yoheinakajima/babyagi" target="_blank" rel="noopener"
>BabyAGI&lt;/a>, and of course, AgentGPT. With this brief overview in mind, let&amp;rsquo;s dive deeper into each component.
这三个概念构成了多个成功的基于代理的 LLM 平台的支柱，例如 Microsoft Jarvis、AutoGPT、BabyAGI，当然还有 AgentGPT。记住这个简短的概述，让我们更深入地了解每个组件。&lt;/p>
&lt;h2 id="how-do-we-get-agents-to-act-intelligently我们如何让代理人明智地行动">How do we get agents to act intelligently?我们如何让代理人明智地行动？&lt;/h2>
&lt;p>&lt;strong>Prompt engineering&lt;/strong> has become highly popularized, and it&amp;rsquo;s only natural given its ability to &lt;em>increase the reliability of LLM responses&lt;/em>, opening a wide avenue of potential applications for generative AI. AgentGPT&amp;rsquo;s ability to think and reason is a result of novel prompting methods.
即时工程已经高度普及，考虑到它能够提高法学硕士反应的可靠性，为生成式人工智能的潜在应用开辟了广阔的途径，这是很自然的。 AgentGPT 的思考和推理能力是新颖的提示方法的结果。&lt;/p>
&lt;h3 id="a-brief-intro-to-prompt-engineering快速工程简介">A Brief Intro to Prompt Engineering快速工程简介&lt;/h3>
&lt;p>Prompt engineering is a largely empirical field that aims to find methods to steer LLM responses by finding clever ways to use the English language. *You can think of it like lawyering, where every nuance in the wording of a prompt counts.
即时工程是一个很大程度上是经验性的领域，旨在通过巧妙地使用英语来找到指导 LLM 反应的方法。你可以把它想象成律师，提示措辞中的每一个细微差别都很重要。&lt;/p>
&lt;p>These are the main concepts and building blocks for more advanced prompting techniques:这些是更高级提示技术的主要概念和构建模块：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Zero-Shot&lt;/strong> involves sending the raw command directly to the LLM with little to no formatting.零射击涉及将原始命令直接发送到 LLM，几乎不需要格式化。&lt;/li>
&lt;li>&lt;strong>Few-Shot&lt;/strong> gives context for completions in the form of example responses.Few-Shot 以示例响应的形式提供完成的上下文。&lt;/li>
&lt;li>&lt;strong>Chain-of-Thought&lt;/strong> guides the model in reasoning through generating and reasoning over a complex task.思想链通过对复杂任务的生成和推理来指导模型进行推理。&lt;/li>
&lt;/ol>
&lt;h3 id="how-agentgpt-uses-prompt-engineeringagentgpt-如何使用即时工程">How AgentGPT Uses Prompt EngineeringAgentGPT 如何使用即时工程&lt;/h3>
&lt;p>AgentGPT uses an advanced form of chain-of-thought prompting called &lt;strong>Plan-and-Solve&lt;/strong> to generate the steps you see when operating the agents.AgentGPT 使用一种称为“计划与解决”的高级思维链提示形式来生成您在操作代理时看到的步骤。&lt;/p>
&lt;p>Traditionally, chain-of-thought prompting utilized few-shot techniques to provide examples of a thinking and reasoning process. However, as is becomes a theme, it becomes more costly as the complexity of a task increases because we will need to provide more context.
传统上，思维链提示利用小样本技术来提供思维和推理过程的示例。然而，当它成为一个主题时，随着任务复杂性的增加，它的成本也会变得更高，因为我们需要提供更多的上下文。&lt;/p>
&lt;p>&lt;strong>Plan-and-solve (PS):&lt;/strong> By virtue of being a zero-shot method, it provides a &lt;em>prompting framework for LLM-guided reasoning using &amp;ldquo;trigger&amp;rdquo; words&lt;/em>. These keywords trigger a reasoning response from the model.计划与解决（PS）：由于是一种零样本方法，它为使用“触发”词的 LLM 引导推理提供了一个提示框架。这些关键字触发模型的推理响应。&lt;/p>
&lt;p>We can expand on this concept by &lt;em>modifying the prompt to extract important variables and steps to generate a final response with a cohesive format&lt;/em>. This method allows us to parse the final response and display it for the end user as well as feed sub-steps into future plan-and-solve prompts.我们可以通过修改提取重要变量的提示和生成具有内聚格式的最终响应的步骤来扩展这个概念。此方法允许我们解析最终响应并将其显示给最终用户，并将子步骤提供给未来的计划和解决提示。&lt;/p>
&lt;p>&lt;img src="https://petal-diplodocus-04a.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F29d8c98c-21e6-4991-992d-62d95fd40dba%2FScreen_Shot_2023-07-01_at_12.25.37_PM.png?id=021895a6-149a-4282-aa8e-6719e7d7c47a&amp;amp;table=block&amp;amp;spaceId=46c3481b-d8de-4c34-8647-2292d63a5f29&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2"
loading="lazy"
alt="Screen Shot 2023-07-01 at 12.25.37 PM.png"
>&lt;/p>
&lt;blockquote>
&lt;p>Alt: Picture of Plan &amp;amp; SolveAlt：计划和解决方案的图片&lt;/p>
&lt;/blockquote>
&lt;p>While PS prompting helps evoke a reasoning response, it still misses a fundamental concept in reasoning, and that is proper handling for reflection and action. &lt;strong>Reflection&lt;/strong>is &lt;em>fundamental for any agent because it must rationalize an action, perform that action, and use feedback to adjust future actions.&lt;/em> Without it, the agent would be stateless and unchanging.
虽然 PS 提示有助于唤起推理反应，但它仍然忽略了推理中的一个基本概念，那就是对反思和行动的正确处理。反思对于任何智能体来说都是基础，因为它必须合理化某个动作、执行该动作并使用反馈来调整未来的动作。没有它，代理将是无状态且不变的。&lt;/p>
&lt;p>AgentGPT uses a prompting framework called Reasoning and Acting (&lt;a class="link" href="https://arxiv.org/pdf/2210.03629.pdf" target="_blank" rel="noopener"
>ReAct&lt;/a>) to expand on the capabilities of the Plan-and-Solve concept. &lt;strong>ReAct&lt;/strong> aims to &lt;em>enable a framework for the model to access fresh knowledge through external knowledge bases and make observations of actions it has taken&lt;/em>. Using those observations, the LLM can make educated decisions on the next set of steps to complete while performing actions to query knowledge bases such as &lt;strong>Google Search&lt;/strong> or &lt;strong>Wikipedia API&lt;/strong>.
AgentGPT 使用称为推理和行动 (ReAct) 的提示框架来扩展计划和解决概念的功能。 ReAct 旨在为模型提供一个框架，使其能够通过外部知识库获取新知识并观察其所采取的行动。利用这些观察结果，法学硕士可以对下一组要完成的步骤做出明智的决策，同时执行查询知识库（例如 Google 搜索或维基百科 API）的操作。&lt;/p>
&lt;p>Prompt engineering is largely effective in resolving challenges in short-term memory as well as instilling the reasoning behavior that you can see when AgentGPT is at work. However, prompt engineering does not resolve the issue of long-term memory. This issue is where vector databases come in, and we will look at those next.
即时工程在解决短期记忆挑战以及灌输 AgentGPT 工作时可以看到的推理行为方面非常有效。然而，即时工程并不能解决长期记忆的问题。这个问题就是矢量数据库的用武之地，我们接下来将讨论这些问题。&lt;/p>
&lt;p>&lt;img src="https://petal-diplodocus-04a.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F481f0812-00e5-4cb1-9ed6-4f2f9215eef5%2FScreen_Shot_2023-07-03_at_3.12.56_AM.png?id=8002f409-2913-4e68-b8b6-6100c4128cf5&amp;amp;table=block&amp;amp;spaceId=46c3481b-d8de-4c34-8647-2292d63a5f29&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2"
loading="lazy"
alt="Screen Shot 2023-07-03 at 3.12.56 AM.png"
>&lt;/p>
&lt;blockquote>
&lt;p>Alt : ReAct (Reason + Act) Logic PictureAlt : ReAct (理性 + 行动) 逻辑图&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The ReAct framework allows us to generate a reasoning response, an action, and a reflection to steer the model’s response. This example is courtesy of the following paper: &lt;a class="link" href="https://arxiv.org/abs/2210.03629" target="_blank" rel="noopener"
>ReAct: Synergizing Reasoning and Acting in Language Models&lt;/a>*ReAct 框架允许我们生成推理响应、操作和反射来引导模型的响应。此示例由以下论文提供：ReAct：在语言模型中协同推理和行动*&lt;/p>
&lt;/blockquote>
&lt;h2 id="how-do-we-give-agents-a-working-memory我们如何为代理提供工作记忆">How do we give agents a working memory?我们如何为代理提供工作记忆？&lt;/h2>
&lt;p>While we have seen that &lt;em>prompt engineering is largely effective in resolving issues with short-term memory and reasoning&lt;/em>, we cannot solve long-term memory solely through clever English. Since we are not allowed to update the model to learn our data, we must build an external system for storing and retrieving knowledge.虽然我们已经看到即时工程在解决短期记忆和推理问题方面非常有效，但我们不能仅通过聪明的英语来解决长期记忆。由于我们不允许更新模型来学习数据，因此我们必须构建一个外部系统来存储和检索知识。&lt;/p>
&lt;p>A clever solution might use an LLM to &lt;em>generate summaries of previous conversations as context for the prompt&lt;/em>. However, there are three significant issues with this. First, we are diluting the relevant information for the conversation; second, it introduces another cost area by paying for API usage for those summaries; and third, it&amp;rsquo;s unscalable.一个聪明的解决方案可能会使用法学硕士来生成以前对话的摘要作为提示的上下文。然而，这存在三个重大问题。首先，我们淡化对话的相关信息；其次，它引入了另一个成本领域，即为这些摘要的 API 使用付费；第三，它是不可扩展的。&lt;/p>
&lt;p>Thus, prompts appear to be ineffective for long-term memory. Seeing as &lt;em>long-term memory is a problem of storage and efficient retrieval of information&lt;/em>, there is no absence of research in the study of search, so we must look towards vector databases.因此，提示似乎对长期记忆无效。由于长期记忆是一个信息存储和高效检索的问题，搜索的研究并不缺乏，因此我们必须将目光投向向量数据库。&lt;/p>
&lt;h3 id="vector-databases-demystified揭秘矢量数据库">Vector Databases Demystified揭秘矢量数据库&lt;/h3>
&lt;p>&lt;strong>&lt;a class="link" href="https://aws.amazon.com/what-is/vector-databases/" target="_blank" rel="noopener"
>Vector databases&lt;/a>&lt;/strong> have been hyped up for a while now, and the hype is very deserved. They are an efficient way of storing and retrieving vectors by allowing us to use some fun new *algorithms to query billions - even trillions - of data records in milliseconds.*矢量数据库已经被炒作有一段时间了，而且这种炒作是非常值得的。它们是存储和检索向量的有效方法，允许我们使用一些有趣的新算法在几毫秒内查询数十亿甚至数万亿条数据记录。&lt;/p>
&lt;p>Let&amp;rsquo;s start with a little bit of vocabulary:让我们从一些词汇开始：&lt;/p>
&lt;ul>
&lt;li>A &lt;strong>vector&lt;/strong> in the context of an LLM is a representation of a piece of text that a model like GPT-4 encodes.LLM 上下文中的向量是 GPT-4 等模型编码的一段文本的表示。&lt;/li>
&lt;li>A &lt;strong>vector space&lt;/strong> contains many of these vectors.向量空间包含许多这样的向量。&lt;/li>
&lt;li>An &lt;strong>embedding&lt;/strong> is the vectorized version of a text.嵌入是文本的矢量化版本。&lt;/li>
&lt;/ul>
&lt;h3 id="vector-libraries-like向量库如">Vector libraries like 向量库如&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.bing.com/ck/a?!&amp;amp;&amp;amp;p=a0f4167bc6cd7db9JmltdHM9MTY4ODM0MjQwMCZpZ3VpZD0zOTYwYjczZS1hNzg2LTY5Y2MtMjM2YS1hNDdmYTYwMjY4MjImaW5zaWQ9NTIwMQ&amp;amp;ptn=3&amp;amp;hsh=3&amp;amp;fclid=3960b73e-a786-69cc-236a-a47fa6026822&amp;amp;psq=faiss&amp;#43;github&amp;amp;u=a1aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rcmVzZWFyY2gvZmFpc3M&amp;amp;ntb=1" target="_blank" rel="noopener"
>Facebook AI Similarity Search&lt;/a> ( FAISS) give us access to valuable *tools to control these vectors and locate them efficiently in the vector space.*Facebook AI 相似性搜索 (FAISS) 为我们提供了宝贵的工具来控制这些向量并在向量空间中有效地定位它们。&lt;/p>
&lt;p>Since the text is in a numerical embedding dictated by the model type (i.e., text-embedding-ada-002), there is some location in space that the text exists in, and it&amp;rsquo;s based on the numbers that compose its vector. That means &lt;em>similar texts will be represented as vectors with similar numbers, and thus, they will likely be grouped closely. On the other hand, less similar texts will be further away&lt;/em>. For example, texts about cooking will be closer to food than texts about physics.由于文本处于由模型类型指定的数字嵌入中（即 text-embedding-ada-002），因此文本存在于空间中的某个位置，并且它基于组成其向量的数字。这意味着相似的文本将被表示为具有相似数字的向量，因此它们可能会被紧密地分组。另一方面，不太相似的文本会离得更远。例如，关于烹饪的文本比关于物理的文本更接近食物。&lt;/p>
&lt;p>There are several different algorithms for querying the vector space, but the most relevant to this discussion is the cosine similarity search. &lt;strong>&lt;a class="link" href="https://www.geeksforgeeks.org/cosine-similarity/" target="_blank" rel="noopener"
>Cosine similarity&lt;/a>&lt;/strong> measures the cosine of the angle between two non-zero vectors. &lt;em>It is a measure of orientation, meaning that it&amp;rsquo;s used to determine how similar two documents (or whatever the vectors represent) are&lt;/em>. Cosine similarity can range from -1 to 1, with -1 meaning the vectors are diametrically opposed (completely opposite), 0 meaning the vectors are orthogonal (or unrelated), and 1 meaning the vectors are identical.有几种不同的算法用于查询向量空间，但与本讨论最相关的是余弦相似度搜索。余弦相似度测量两个非零向量之间角度的余弦。它是方向的度量，这意味着它用于确定两个文档（或向量表示的任何内容）的相似程度。余弦相似度的范围为 -1 到 1，其中 -1 表示向量完全相反（完全相反），0 表示向量正交（或不相关），1 表示向量相同。&lt;/p>
&lt;p>FAISS is helpful in managing these vector spaces, but it is not a database. &lt;em>Vector libraries lack &lt;a class="link" href="https://www.freecodecamp.org/news/crud-operations-explained/" target="_blank" rel="noopener"
>CRUD&lt;/a> operations, which makes them alone unviable for long-term memory&lt;/em>, and that&amp;rsquo;s where cloud services such as Pinecone and Weaviate step in.FAISS 有助于管理这些向量空间，但它不是数据库。矢量库缺乏 CRUD 操作，这使得它们无法单独用于长期记忆，而这正是 Pinecone 和 Weaviate 等云服务介入的地方。&lt;/p>
&lt;p>&lt;strong>Pinecone&lt;/strong> and &lt;strong>Weaviate&lt;/strong> essentially do all the hard work of managing our vectors. They provide an API that allows you to upload embeddings, perform various types of searches, and store those vectors for later. *They provide the typical CRUD functions we need to instill memory into LLMs in easily-accessible Python modules.*Pinecone 和 Weaviate 基本上完成了管理我们载体的所有艰苦工作。他们提供了一个 API，允许您上传嵌入、执行各种类型的搜索并存储这些向量以供以后使用。它们提供了我们需要的典型 CRUD 函数，以便将内存注入到易于访问的 Python 模块中的 LLM 中。&lt;/p>
&lt;p>By using them, we can encode large amounts of information for future storage and retrieval. For instance, when the LLM needs extra knowledge to complete a task, we can prompt it to query the vector space to find relevant information. Thus, we can create long-term memory.通过使用它们，我们可以对大量信息进行编码以供将来存储和检索。例如，当LLM需要额外的知识来完成任务时，我们可以提示它查询向量空间以查找相关信息。因此，我们可以创造长期记忆。&lt;/p>
&lt;p>&lt;img src="https://petal-diplodocus-04a.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fad2521b3-1c6b-4f16-b719-d2b766570c61%2FCybrCo_Art_A_human-like_robot_touching_a_flower_for_the_first_t_92e97d56-54fa-4bb0-8581-5a1e15fd94aa.webp?id=8d261d10-f4e4-4798-bc33-8f40da67bb42&amp;amp;table=block&amp;amp;spaceId=46c3481b-d8de-4c34-8647-2292d63a5f29&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2"
loading="lazy"
alt="CybrCo_Art_A_human-like_robot_touching_a_flower_for_the_first_t_92e97d56-54fa-4bb0-8581-5a1e15fd94aa.webp"
>&lt;/p>
&lt;blockquote>
&lt;p>Alt : Robot With A Rose In HandAlt : 手握玫瑰的机器人&lt;/p>
&lt;/blockquote>
&lt;h2 id="tools-to-interact-with-the-environment与环境交互的工具">Tools to interact with the environment与环境交互的工具&lt;/h2>
&lt;p>While &lt;strong>prompt engineering&lt;/strong> and &lt;strong>vector databases&lt;/strong> resolve many of the limitations and challenges of LLMs, there is still the problem of agent interaction. *How can we extend the capabilities of an LLM to interact with the environment outside of text?*虽然即时工程和矢量数据库解决了法学硕士的许多限制和挑战，但仍然存在代理交互的问题。我们如何扩展法学硕士与文本之外的环境交互的能力？&lt;/p>
&lt;p>APIs are the answer. By utilizing APIs, we can give our agents the ability to perform a wide range of actions and access external resources.API 就是答案。通过利用 API，我们可以让我们的代理能够执行各种操作并访问外部资源。&lt;/p>
&lt;p>Here are a few examples:这里有一些例子：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Google Search API&lt;/strong>: Allows agents to search the web and retrieve relevant information.Google Search API：允许代理搜索网络并检索相关信息。&lt;/li>
&lt;li>&lt;strong>Hugging Face&lt;/strong>: Provides access to various NLP models and transformers for tasks such as summarization, translation, sentiment analysis, and more.Hugging Face：提供对各种 NLP 模型和转换器的访问，以执行摘要、翻译、情感分析等任务。&lt;/li>
&lt;li>&lt;strong>Dall-E&lt;/strong>: Enables agents to generate images from textual descriptions.Dall-E：使代理能够根据文本描述生成图像。&lt;/li>
&lt;li>&lt;strong>OpenAI&amp;rsquo;s GPT API&lt;/strong>: Allows agents to utilize the GPT-4 model for text completion and generation.OpenAI 的 GPT API：允许代理利用 GPT-4 模型进行文本完成和生成。&lt;/li>
&lt;/ul>
&lt;p>Using API tools in combination with prompt engineering techniques, we can create prompts that generate predictable function calls and utilize the output of API requests to enhance the agent&amp;rsquo;s capabilities. This enables agents to interact with the environment in a meaningful way beyond text-based interactions.使用 API 工具与提示工程技术相结合，我们可以创建生成可预测函数调用的提示，并利用 API 请求的输出来增强代理的功能。这使得代理能够以一种超越基于文本的交互的有意义的方式与环境交互。&lt;/p>
&lt;h3 id="engineering-robust-function-calls工程稳健的函数调用">Engineering Robust Function Calls工程稳健的函数调用&lt;/h3>
&lt;p>Again, we can achieve tooling through prompt engineering by &lt;em>representing the tool we want to provide for the model&lt;/em> as a &lt;strong>function&lt;/strong>. &lt;em>We can then tell the model that this function exists in a prompt, so our program can call it programmatically based on the model&amp;rsquo;s response&lt;/em>. First, however, we should examine the main challenges in implementing tool interactions: consistency, context, and format.同样，我们可以通过将我们想要为模型提供的工具表示为函数来通过即时工程来实现工具。然后我们可以告诉模型该函数存在于提示中，因此我们的程序可以根据模型的响应以编程方式调用它。然而，首先，我们应该检查实现工具交互的主要挑战：一致性、上下文和格式。&lt;/p>
&lt;p>For example, responses tend to vary among chat completions that use the same prompt. Thus, getting the LLM to issue a function call consistently is challenging. A minor solution may include adjusting the &lt;strong>temperature&lt;/strong> of the model (a parameter to control the randomness), but the best solution should leverage an LLM&amp;rsquo;s reasoning abilities. Thus, *we can use the ReAct framework to help the llm understand when to issue function calls.*例如，使用相同提示的聊天完成之间的响应往往会有所不同。因此，让法学硕士一致地发出函数调用是具有挑战性的。一个次要的解决方案可能包括调整模型的温度（控制随机性的参数），但最好的解决方案应该利用法学硕士的推理能力。因此，我们可以使用 ReAct 框架来帮助 llm 了解何时发出函数调用。&lt;/p>
&lt;p>In doing this, we will still run into another major issue. How will the LLMs understand what tools are at their disposal? We could include the available tools in a prompt, but this could significantly increase the number of tokens we would need to send to the model. While this may be fine for an application that runs on a couple of tools, it will increase costs as we add more tools to the system. Thus, *we would use vector databases to help the LLM look up relevant tools it needs.*在这样做的过程中，我们还会遇到另一个重大问题。法学硕士如何了解他们可以使用哪些工具？我们可以在提示中包含可用的工具，但这可能会显着增加我们需要发送到模型的令牌数量。虽然这对于在多个工具上运行的应用程序来说可能没问题，但随着我们向系统添加更多工具，它会增加成本。因此，我们将使用向量数据库来帮助法学硕士查找其所需的相关工具。&lt;/p>
&lt;p>Finally, we need to generate function calls in a predictable format. This format should include provisions for the name of the function and the parameters it takes, and it must include delimiters that allow us to parse and execute the response for those parameters programmatically. *For instance, you can prompt the model to only return responses in JSON and then use built-in Python libraries to parse the stringified JSON.*最后，我们需要以可预测的格式生成函数调用。此格式应包括函数名称及其采用的参数的规定，并且必须包括允许我们以编程方式解析和执行这些参数的响应的分隔符。例如，您可以提示模型仅返回 JSON 格式的响应，然后使用内置 Python 库来解析字符串化的 JSON。&lt;/p>
&lt;p>Recently, it became even easier to use this type of method as well. In late June, OpenAI released &lt;strong>gpt-4-0613&lt;/strong> and &lt;strong>gpt-3.5-turbo-16k-0613&lt;/strong> (whew, these names are getting long). They natively support function calls by using a model fine-tuned for JSON to return easy-to-use function calls. You can read more about it &lt;a class="link" href="https://platform.openai.com/docs/guides/gpt/function-calling" target="_blank" rel="noopener"
>here&lt;/a>.最近，使用这种方法也变得更加容易。 6月下旬，OpenAI发布了gpt-4-0613和gpt-3.5-turbo-16k-0613（哇，这些名字越来越长了）。它们通过使用针对 JSON 进行微调的模型来原生支持函数调用，以返回易于使用的函数调用。你可以在这里读更多关于它的内容。&lt;/p>
&lt;h2 id="the-future-of-llm-powered-agents-is-brightllm-代理人的未来是光明的">The future of LLM-powered agents is bright!LLM 代理人的未来是光明的！&lt;/h2>
&lt;p>Large language models have been one of the most significant advances of the past decade. Capable of reasoning and talking like a human, they appear to be able to do anything. Despite this, several engineering challenges arise in building around an LLM, such as context limits, reasoning, and long-term retention.大型语言模型是过去十年最重大的进步之一。它们能够像人类一样推理和说话，似乎能够做任何事情。尽管如此，围绕法学硕士的构建仍会出现一些工程挑战，例如上下文限制、推理和长期保留。&lt;/p>
&lt;p>Using the methods described above, &lt;strong>AgentGPT&lt;/strong> unlocks the full potential of powerful models such as GPT-4. &lt;em>We can give any model superpowers using novel prompting methods, efficient vector databases, and abundant API tools&lt;/em>. It&amp;rsquo;s only the start, and we hope you&amp;rsquo;ll join us on this journey.使用上述方法，AgentGPT 释放了 GPT-4 等强大模型的全部潜力。通过新颖的提示方法、高效的向量数据库、丰富的API工具，我们可以赋予任何模型超能力。这只是一个开始，我们希望您能加入我们的旅程。&lt;/p>
&lt;h2 id="conclusion结论">Conclusion 结论&lt;/h2>
&lt;p>AgentGPT represents a powerful approach to building AI agents that reason, remember, and perform. By leveraging prompt engineering, vector databases, and API tools, we can overcome the limitations of standalone LLMs and create agents that demonstrate agentic behavior.AgentGPT 代表了构建具有推理、记忆和执行功能的 AI 代理的强大方法。通过利用即时工程、矢量数据库和 API 工具，我们可以克服独立法学硕士的局限性，并创建能够展示代理行为的代理。&lt;/p>
&lt;p>With the ability to reason, plan, and reflect, AgentGPT agents can tackle complex tasks and interact with the environment in a meaningful way. By incorporating long-term memory through vector databases and utilizing APIs, we provide agents with access to a vast pool of knowledge and resources.凭借推理、计划和反思的能力，AgentGPT 代理可以处理复杂的任务并以有意义的方式与环境交互。通过向量数据库整合长期记忆并利用 API，我们为代理提供了访问大量知识和资源的机会。&lt;/p>
&lt;p>AgentGPT is a step towards unlocking the full potential of LLMs and creating intelligent agents that can assist and collaborate with humans in various domains. The combination of language models, prompt engineering, external memory, and API interactions opens up exciting possibilities for AI agents in the future.AgentGPT 是朝着释放法学硕士的全部潜力和创建可以在各个领域协助人类并与人类协作的智能代理迈出的一步。语言模型、即时工程、外部存储器和 API 交互的结合为人工智能代理的未来开辟了令人兴奋的可能性。&lt;/p></description></item><item><title>Agentverse</title><link>https://umpire2018.github.io/p/agentverse/</link><pubDate>Tue, 19 Sep 2023 14:39:02 +0800</pubDate><guid>https://umpire2018.github.io/p/agentverse/</guid><description>&lt;img src="https://umpire2018.github.io/p/agentverse/cover.png" alt="Featured image of post Agentverse" />&lt;p>AgentVerse 提供了一个多功能的框架，简化了为大型语言模型（LLMs）创建自定义多智能体环境的过程。旨在快速、低成本的开发和定制，我们的框架赋能研究人员专注于他们的研究，而不被实现细节所困扰。&lt;/p>
&lt;blockquote>
&lt;p>原文链接： &lt;a class="link" href="https://github.com/OpenBMB/AgentVerse/tree/main" target="_blank" rel="noopener"
>OpenBMB/AgentVerse&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="-特点">✨ 特点&lt;/h2>
&lt;ul>
&lt;li>🥳 &lt;strong>高效的环境构建:&lt;/strong> 我们的框架提供了一系列基础构建模块，轻松创建多智能体环境。只需在配置文件中写入几行，你就可以轻松建立如LLMs的聊天室这样的基础环境。这个过程包括为LLMs定义环境的设置和提示，使像你这样的研究者能够专注于实验和分析。&lt;/li>
&lt;li>⚙️ &lt;strong>可定制组件&lt;/strong>: AgentVerse通过将多智能体环境分为五个功能模块并定义其各自的接口来简化它。对于不能直接使用AgentVerse提供的基本模块构建的复杂环境，你可以定制这五个功能模块中的一个或多个接口，根据你的要求高效地创建自己的多智能体环境。&lt;/li>
&lt;li>🛠 &lt;strong>工具(插件)利用&lt;/strong>: AgentVerse支持多智能体环境的工具。目前，AgentVerse支持&lt;a class="link" href="https://github.com/OpenBMB/BMTools" target="_blank" rel="noopener"
>BMTools&lt;/a>中提供的工具。&lt;/li>
&lt;/ul>
&lt;h2 id="-最新消息">📰 最新消息&lt;/h2>
&lt;ul>
&lt;li>[2023/8/22] 📝 我们很高兴分享与此仓库相关的正在进行中的论文 &lt;a class="link" href="https://arxiv.org/abs/2308.10848" target="_blank" rel="noopener"
>AgentVerse: Facilitating Multi-Agent Collaboration and Exploring Emergent Behaviors in Agents&lt;/a>.&lt;/li>
&lt;li>[2023/6/5] 🎉 我们很荣幸地展示了一系列 &lt;a class="link" href="#-simple-demo-video" >demos&lt;/a>, 包括 &lt;a class="link" href="#nlp%e6%95%99%e5%ae%a4" >NLP教室&lt;/a>, &lt;a class="link" href="#%e5%9b%9a%e5%be%92%e5%9b%b0%e5%a2%83" >囚徒困境&lt;/a>, &lt;a class="link" href="#%e8%bd%af%e4%bb%b6%e5%bc%80%e5%8f%91" >软件开发&lt;/a>, &lt;a class="link" href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e8%bf%90%e7%bb%b4" >数据库运维&lt;/a>, 以及一个简单的 &lt;a class="link" href="#%e5%ae%9d%e5%8f%af%e6%a2%a6%e6%b8%b8%e6%88%8f" >H5宝可梦游戏&lt;/a> 该游戏允许与宝可梦中的角色互动！你可以试玩这些demo，祝你玩得开心！&lt;/li>
&lt;li>[2023/5/1] 🚀 &lt;a class="link" href="https://github.com/OpenBMB/AgentVerse" target="_blank" rel="noopener"
>AgentVerse&lt;/a> 正式发布！&lt;/li>
&lt;/ul>
&lt;h2 id="演示">演示&lt;/h2>
&lt;h3 id="流程">流程&lt;/h3>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/11704492/264917097-6db1c907-b7fc-42f9-946c-89853a28f386.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="视频">视频&lt;/h3>
&lt;h4 id="nlp教室">NLP教室&lt;/h4>
&lt;p>在NLP课堂中，教授和学生进行互动交流。当学生有问题时，他们会举手并耐心等待教授指名。只有在教授点名后，学生才能发言并提问。
使用以下命令启动NLP教室示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python main_demo.py --task nlp_classroom_9players
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="video-wrapper">
&lt;video
controls
src="https://github.com/OpenBMB/AgentVerse/assets/11704492/6ea07850-595e-4a28-a82e-f863011353c2"
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="https://github.com/OpenBMB/AgentVerse/assets/11704492/6ea07850-595e-4a28-a82e-f863011353c2">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h4 id="囚徒困境">囚徒困境&lt;/h4>
&lt;p>囚徒的困境是一个思考实验，它挑战两个完全理性的智能体面临的困境：他们可以与伙伴合作以获得互利，或背叛伙伴（&amp;ldquo;违背&amp;rdquo;）以获得个人奖励。
使用以下命令启动NLP教室示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python main_demo.py --task prisoner_dilemma
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="video-wrapper">
&lt;video
controls
src="https://github.com/OpenBMB/AgentVerse/assets/11704492/017c46e5-c738-4fca-9352-b008e2d518bd"
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="https://github.com/OpenBMB/AgentVerse/assets/11704492/017c46e5-c738-4fca-9352-b008e2d518bd">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h4 id="软件开发">软件开发&lt;/h4>
&lt;p>在软件设计示例中，代码编写者、代码测试者和代码审查者在代码生成问题上进行合作。给定一个问题，代码编写者首先撰写代码实现。代码测试者运行单元测试并提供反馈。然后，代码审查者生成评审。在收集了测试反馈和审查后，代码编写者迭代地优化代码。
使用以下命令启动软件设计示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python main_demo.py --task sde_team/sde_team_2players
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="video-wrapper">
&lt;video
controls
src="https://github.com/OpenBMB/AgentVerse/assets/11704492/5058066a-abee-490d-8659-b4e54661626a"
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="https://github.com/OpenBMB/AgentVerse/assets/11704492/5058066a-abee-490d-8659-b4e54661626a">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h4 id="数据库运维httpsgithubcomzhouxh19agentverse_for_database_diagnosis">&lt;a class="link" href="https://github.com/zhouxh19/AgentVerse_for_Database_Diagnosis" target="_blank" rel="noopener"
>数据库运维&lt;/a>&lt;/h4>
&lt;p>在数据库诊断场景中，首席DBA监控数据库系统以查找异常。如果检测到，会提醒内存和CPU智能体进行根源分析并建议优化解决方案。然后，首席DBA向用户提供总结的诊断，用户也可以通过给予指导或评估所提议解决方案的有效性来作出贡献。
首先，您应该在BMTools中配置&lt;a class="link" href="https://github.com/OpenBMB/BMTools/blob/main/bmtools/tools/db_diag/readme.md" target="_blank" rel="noopener"
>数据库工具&lt;/a>, 并根据&lt;a class="link" href="https://github.com/OpenBMB/BMTools/tree/main#211-local-tools" target="_blank" rel="noopener"
>指南&lt;/a>启动BMTools服务器。然后使用以下命令启动数据库管理员示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python main_demo.py --task db_diag
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="video-wrapper">
&lt;video
controls
src="https://user-images.githubusercontent.com/11704492/242840683-c633419d-afbb-47d4-bb12-6bb512e7af3a.mp4"
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="https://user-images.githubusercontent.com/11704492/242840683-c633419d-afbb-47d4-bb12-6bb512e7af3a.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h4 id="文本评估-chatevalhttpsgithubcomchanchiminchateval">&lt;a class="link" href="https://github.com/chanchimin/ChatEval" target="_blank" rel="noopener"
>文本评估 (ChatEval)&lt;/a>&lt;/h4>
&lt;p>在文本评估场景的背景下，我们建议用户探索&lt;a class="link" href="https://github.com/chanchimin/ChatEval" target="_blank" rel="noopener"
>ChatEval&lt;/a>仓库。他们在AgentVerse上实现了一个多智能体裁判团来评估不同模型生成的文本质量。给定两个不同的文本，ChatEval中的角色可以自主地辩论其细微差别，并根据分配给他们的人物特点提供其判断。实验表明，他们的裁判团，根据&lt;a class="link" href="#2-configuring-the-agents" >config.yaml&lt;/a>中规定的多样角色，与人类的评估更为接近。这个演示是基于&lt;a class="link" href="https://github.com/lm-sys/FastChat" target="_blank" rel="noopener"
>Fastchat&lt;/a>仓库构建的，我们想对他们的基础工作表示感谢。
&lt;div class="video-wrapper">
&lt;video
controls
src="https://github.com/OpenBMB/AgentVerse/assets/75533759/58f33468-f15b-4bac-ae01-8d0780019f85"
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="https://github.com/OpenBMB/AgentVerse/assets/75533759/58f33468-f15b-4bac-ae01-8d0780019f85">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;/p>
&lt;h4 id="宝可梦游戏">宝可梦游戏&lt;/h4>
&lt;p>在这个简易游戏中，NPC之间可以自主互动。作为玩家，你扮演一个角色，可以随时与其他NPC互动。在这一游戏中有6个宝可梦绿宝石版中出现的角色: &lt;a class="link" href="https://bulbapedia.bulbagarden.net/wiki/May_%28game%29" target="_blank" rel="noopener"
>May&lt;/a>, &lt;a class="link" href="https://bulbapedia.bulbagarden.net/wiki/Professor_Birch" target="_blank" rel="noopener"
>Professor Birch&lt;/a>, &lt;a class="link" href="https://bulbapedia.bulbagarden.net/wiki/Steven_Stone" target="_blank" rel="noopener"
>Steven Stone&lt;/a>, &lt;a class="link" href="https://bulbapedia.bulbagarden.net/wiki/Maxie" target="_blank" rel="noopener"
>Maxie&lt;/a>, &lt;a class="link" href="https://bulbapedia.bulbagarden.net/wiki/Archie" target="_blank" rel="noopener"
>Archie&lt;/a> 和&lt;a class="link" href="https://bulbapedia.bulbagarden.net/wiki/Mr._Stone" target="_blank" rel="noopener"
>Joseph&lt;/a>.
要启动宝可梦游戏，首先使用以下命令启动本地服务器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">uvicorn pokemon_server:app --reload --port &lt;span class="m">10002&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在项目的根路径中打开另一个终端并运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ui
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># If you do not have npm installed, you need to install it before running the following commands &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># https://docs.npmjs.com/downloading-and-installing-node-js-and-npm&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># We have tested on npm@9.6.4, node@20.0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npm run watch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等待编译完成。祝你玩得开心！(使用WASD移动，SPACE键启动对话。)
&lt;a class="link" href="https://github.com/OpenBMB/AgentVerse/assets/11704492/4d07da68-f942-4205-b558-f155e95782e7" target="_blank" rel="noopener"
>示例&lt;/a>&lt;/p>
&lt;h2 id="-开始使用">🚀 开始使用&lt;/h2>
&lt;h3 id="安装">安装&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">pip install -U agentverse
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者您可以通过手动克隆最新的仓库来安装此包：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone https://github.com/OpenBMB/AgentVerse.git --depth &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> AgentVerse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip install -r requirements.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一些用户报告在安装 &lt;code>gradio&lt;/code>所需的 &lt;code>orjson&lt;/code>时遇到问题。一个简单的解决方法是使用Anaconda来安装它：&lt;code>conda install -c conda-forge orjson&lt;/code>。
您还需要按如下方式导出您的OpenAI API密钥：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 导出你的OpenAI API密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">OPENAI_API_KEY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;your_api_key_here&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果您想使用BMTools提供的工具，您需要按如下方式安装BMTools：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone git+https://github.com/OpenBMB/BMTools.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> BMTools
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip install -r requirements.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python setup.py develop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果您想使用 BMTools 提供的工具，您需要按以下方式安装 BMTools：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone git+https://github.com/OpenBMB/BMTools.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> BMTools
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip install -rrequirements.txt python setup。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="命令行示例">命令行示例&lt;/h3>
&lt;p>您可以创建由我们提供的多智能体环境。以教室场景为例。在这个场景中，有九个智能体，一个扮演教授的角色，其他八个是学生。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python3 main.py --task nlp_classroom_9players
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="本地网站演示">本地网站演示&lt;/h3>
&lt;p>我们还为这个环境提供了一个本地网站的演示。您可以用以下命令启动它：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">python3 main_demo.py --task nlp_classroom_9players
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功启动本地服务器后，您可以访问&lt;a class="link" href="http://127.0.0.1:7860/" target="_blank" rel="noopener"
>http://127.0.0.1:7860/&lt;/a> 查看教室环境。&lt;/p>
&lt;h2 id="-理念">💡 理念&lt;/h2>
&lt;h3 id="environment">Environment&lt;/h3>
&lt;p>我们框架的核心是环境，它在使研究人员能够在不同条件下研究智能体行为方面起着至关重要的作用。我们认为环境应该是灵活的和可扩展的，允许研究人员轻松地定制它以适应他们的需求。为了实现这一点，我们将环境抽象为五个规则组件，实现不同的环境实际上是实现不同的规则：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Describer（描述器）&lt;/strong>：此组件为每个智能体在每一轮提供环境的描述。您可以自定义描述器来定义他们的环境的具体要求，例如一个智能体可以与哪些智能体互动。&lt;/li>
&lt;li>&lt;strong>Order（顺序）&lt;/strong>：此组件定义智能体在环境中采取行动的顺序。您可以自定义顺序以反映智能体之间所需的交互。我们提供了几个基本的顺序选项，包括 &lt;code>random&lt;/code>（随机），&lt;code>sequential&lt;/code>（连续）和 &lt;code>concurrent&lt;/code>（所有智能体在每轮都采取行动）。&lt;/li>
&lt;li>&lt;strong>Selector（选择器）&lt;/strong>：此组件选择由智能体生成的有效消息。有时智能体可能生成无效的响应，选择器用于过滤出意外的结果。&lt;/li>
&lt;li>&lt;strong>Updater（更新器）&lt;/strong>：此组件更新每个智能体的记忆。在某些情况下，一个智能体生成的响应不应被所有智能体看到（例如，如果智能体在不同的房间里）。对于每个响应，更新器只更新可以看到它的智能体。&lt;/li>
&lt;li>&lt;strong>Visibility（可见性）&lt;/strong>：此组件维护每个智能体在环境变化中可以看到的智能体列表。例如，当一个智能体从一个房间移动到另一个房间时，每个智能体的可见智能体列表应由 &lt;code>visibility&lt;/code>更新。
通过将环境抽象为这五个组件，我们创建了一个高度灵活且可扩展的框架，使研究人员可以轻松地构建和定制自己的多智能体环境。&lt;/li>
&lt;/ul>
&lt;h3 id="智能体">智能体&lt;/h3>
&lt;p>另一个基本组件是智能体。目前我们提供了两种类型的智能体：&lt;strong>ConversationAgent（对话智能体）&lt;/strong> 和 &lt;strong>ToolAgent（工具智能体）&lt;/strong>。您还可以通过继承BaseAgent类来自定义自己的智能体。&lt;/p>
&lt;h2 id="-定制您自己的环境">✍️ 定制您自己的环境&lt;/h2>
&lt;p>我们在 &lt;code>agentverse/tasks&lt;/code>目录中提供了几个示例。要定制您的环境，您应该&lt;/p>
&lt;ol>
&lt;li>在 &lt;code>agentverse/tasks&lt;/code>中创建一个任务目录&lt;/li>
&lt;li>编写配置文件&lt;/li>
&lt;li>编写解析您智能体响应的输出解析器。&lt;/li>
&lt;li>在 &lt;code>agentverse/tasks/__init__.py&lt;/code>中添加您的解析器
我们将使用 &lt;code>agentverse/tasks/nlp_classroom_3players&lt;/code>中的一个简单示例来说明这个程序。&lt;/li>
&lt;/ol>
&lt;h3 id="一个简单的例子构建一个教室环境">一个简单的例子：构建一个教室环境&lt;/h3>
&lt;p>为了说明如何定制您的环境，我们将使用一个简单的示例来构建一个教室环境，其中一个智能体是教授，一个是学生，一个是助教。&lt;/p>
&lt;h4 id="1-创建任务目录并配置环境">1. 创建任务目录并配置环境&lt;/h4>
&lt;p>首先，我们需要创建一个任务目录并为环境编写我们的配置文件。在 &lt;code>agentverse/tasks&lt;/code>目录中，创建一个新目录，名为 &lt;code>nlp_classroom_3players&lt;/code>。在此目录中，创建一个 &lt;code>config.yaml&lt;/code>文件并写入以下配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># config.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env_type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">basic # 使用AgentVerse中提供的基本环境&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">max_turns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 指定对话的最大轮数&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">order&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sequential # 使用连续的顺序&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">visibility&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">all # 每条消息都可以被所有智能体看到&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">basic # 基本选择器（不选择）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">updater&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">basic # 基本更新器（将消息更新给所有智能体）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">describer&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">basic # 基本描述器（无描述）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个配置指定我们将使用AgentVerse中提供的基本环境，对话的最大轮数为10。我们将使用连续的顺序，所有消息对所有智能体都是可见的。我们不使用任何选择器，我们的更新器会将消息更新给所有的智能体，而我们的描述器不会提供任何描述。&lt;/p>
&lt;h4 id="2-配置智能体">2. 配置智能体&lt;/h4>
&lt;p>接下来，我们将配置智能体。在 &lt;code>config.yaml&lt;/code>文件中，我们将为每个智能体添加配置。以下是教授的示例配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># config.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">agents&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>-&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">agent_type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">conversation&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Professor Micheal # 智能体的名称&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">role_description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">You are Prof. Micheal, ... # 智能体的描述&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">memory_type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">chat_history # 将存储所有的聊天记录&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">prompt_template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">*professor_prompt&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">llm&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">llm_type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">text-davinci-003 &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 将使用OpenAICompletion LLM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">model&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">text-davinci-003 &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 传递给api调用的参数&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">temperature&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0.7&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">max_tokens&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">250&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在此示例中，我们将使用 &lt;code>conversation&lt;/code>智能体类型。我们为智能体指定了一个名称和描述，并将聊天记录存储在内存中。我们还提供了一个带有占位符的提示模板，这些占位符标记为${placeholder}。这些将由智能体的 &lt;code>_fill_prompt_template&lt;/code>方法实例化。&lt;/p>
&lt;h4 id="3-编写一个输出解析器">3. 编写一个输出解析器&lt;/h4>
&lt;p>下一步是为您的智能体的响应编写一个简单的解析器。因为您可能已经在您的提示模板中指定了输出格式，所以您需要提供一个相应的解析器。在此示例中，我们在我们的提示模板中通知模型以以下格式输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Action: Speak
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Action Input: (the content)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code> 动作：说出动作输入：（内容）&lt;/code>
我们将编写一个解析器来从智能体的响应中提取内容。有关更多详细信息，请参考代码。我们使用 &lt;code>@output_parser_registry.register('classroom_parser')&lt;/code>修饰我们的解析器函数，以将其注册到我们的框架中。最后，我们在 &lt;code>agentverse/tasks/__init__.py&lt;/code>中导入我们的解析器。
通过这些步骤，我们已经成功地构建了一个简单的教室环境，并根据我们的需求进行了定制。&lt;/p>
&lt;h3 id="更复杂环境的定制指南">更复杂环境的定制指南&lt;/h3>
&lt;p>虽然我们提供了一个基本框架来构建环境，使用我们的五个规则组件，但更复杂的环境可能需要进一步的定制。详细的文档和教程即将推出。在此，我们简要介绍如何定制您的环境的一些步骤：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>定制五个规则组件&lt;/strong>。每个规则组件都有一个接口，允许您根据特定的需求定制其行为。需要注意的是，这些组件并不一定是独立的，可以通过环境中的 &lt;code>rule_params&lt;/code>字典进行交互。您可以创建自己的规则组件，并与现有的组件集成，以构建智能体之间更复杂的交互。&lt;/li>
&lt;li>&lt;strong>定制环境本身&lt;/strong>。我们的 &lt;code>basic&lt;/code>环境为五个规则组件提供了一个默认的执行顺序，适合大多数情况，但您可以继承 &lt;code>BaseEnvironment&lt;/code>类并编写自己的 &lt;code>run&lt;/code>方法来实现更复杂的执行顺序。&lt;/li>
&lt;li>&lt;strong>定制智能体&lt;/strong>。根据您的特定用例，您可能还需要继承 &lt;code>BaseAgent&lt;/code>类。例如，您可能希望使用您的本地LLM作为智能体，或创建具有专门知识或技能的智能体。&lt;/li>
&lt;/ol>
&lt;h2 id="-示例">🔎 示例&lt;/h2>
&lt;p>目前，我们在 &lt;code>agentverse/tasks&lt;/code>目录中提供了一些简单的示例，每个示例都展示了我们框架的不同可能性。尽管这些示例的性能可能由于有限的提示工程而不是最佳的，但它们旨在展示我们框架的能力，例如允许使用工具。
以下是每个示例的简要概述：&lt;/p>
&lt;ol>
&lt;li>&lt;code>nlp_classroom_3players&lt;/code>：此示例说明了智能体将按顺序交谈的简单情况。&lt;/li>
&lt;li>&lt;code>nlp_classroom_9players&lt;/code>：这是一个NLP课堂示例。在这里，学生们可以在有问题时举手，教授可以叫学生让他们提问。只有在被叫到之后，学生才被允许说话。&lt;/li>
&lt;li>&lt;code>nlp_classroom_9players_group&lt;/code>：此示例展示了小组讨论。必要时，教授可以发起小组讨论，学生们可以在讨论期间只与同一小组的同学交互。&lt;/li>
&lt;li>&lt;code>nlp_classroom_3players_withtool&lt;/code>：在这个课堂中，学生们在听课时可以使用Bing搜索API。&lt;/li>
&lt;li>&lt;code>math_problem_2players_tools&lt;/code>：一个简单的示例，展示了如何使用WolframAlpha API的两个智能体来玩算术游戏。&lt;/li>
&lt;li>&lt;code>prisoner_dilema&lt;/code>：囚犯困境是一个涉及两个理性智能体面临的思想实验，他们可以选择为相互利益而合作，或为个人利益而背叛伙伴。&lt;/li>
&lt;li>&lt;code>db_diag&lt;/code>：首席DBA（智能体）监控数据库系统中的异常，并在检测到任何异常时提醒内存和CPU智能体。他们（智能体）分析根本原因并建议优化解决方案。首席DBA（智能体）向用户提供诊断摘要，用户可以给出指示或评估所提议的解决方案的有效性。&lt;/li>
&lt;li>&lt;code>sde_team&lt;/code>：在SDE团队中，代码编写者、代码测试者和代码审查者在代码生成问题上进行合作。&lt;/li>
&lt;li>&lt;code>pokemon&lt;/code>：此示例模仿宝可梦游戏。&lt;/li>
&lt;/ol>
&lt;h2 id="citation">Citation&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript" data-lang="gdscript">&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="n">misc&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">chen2023agentverse&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">title&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">AgentVerse&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Facilitating&lt;/span> &lt;span class="n">Multi&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Agent&lt;/span> &lt;span class="n">Collaboration&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Exploring&lt;/span> &lt;span class="n">Emergent&lt;/span> &lt;span class="n">Behaviors&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">Agents&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">author&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">Weize&lt;/span> &lt;span class="n">Chen&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Yusheng&lt;/span> &lt;span class="n">Su&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Jingwei&lt;/span> &lt;span class="n">Zuo&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Cheng&lt;/span> &lt;span class="n">Yang&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Chenfei&lt;/span> &lt;span class="n">Yuan&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Chen&lt;/span> &lt;span class="n">Qian&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Chi&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Min&lt;/span> &lt;span class="n">Chan&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Yujia&lt;/span> &lt;span class="n">Qin&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Yaxi&lt;/span> &lt;span class="n">Lu&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Ruobing&lt;/span> &lt;span class="n">Xie&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Zhiyuan&lt;/span> &lt;span class="n">Liu&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Maosong&lt;/span> &lt;span class="n">Sun&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">Jie&lt;/span> &lt;span class="n">Zhou&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">year&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">2023&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">eprint&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mf">2308.10848&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">archivePrefix&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">arXiv&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">primaryClass&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">cs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CL&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>